// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.6

package models

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	permissionFieldNames          = builder.RawFieldNames(&Permission{})
	permissionRows                = strings.Join(permissionFieldNames, ",")
	permissionRowsExpectAutoSet   = strings.Join(stringx.Remove(permissionFieldNames, "`ID`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	permissionRowsWithPlaceHolder = strings.Join(stringx.Remove(permissionFieldNames, "`ID`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	permissionModel interface {
		Insert(ctx context.Context, data *Permission) (sql.Result, error)
		FindOne(ctx context.Context, iD int64) (*Permission, error)
		FindOneByName(ctx context.Context, name string) (*Permission, error)
		Update(ctx context.Context, data *Permission) error
		Delete(ctx context.Context, iD int64) error
	}

	defaultPermissionModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Permission struct {
		ID          int64          `db:"ID"`          // 权限ID
		Name        string         `db:"Name"`        // 权限名称
		Description sql.NullString `db:"Description"` // 权限描述
		CreateTime  time.Time      `db:"CreateTime"`  // 创建时间
		UpdateTime  sql.NullTime   `db:"UpdateTime"`  // 更新时间
	}
)

func newPermissionModel(conn sqlx.SqlConn) *defaultPermissionModel {
	return &defaultPermissionModel{
		conn:  conn,
		table: "`Permission`",
	}
}

func (m *defaultPermissionModel) Delete(ctx context.Context, iD int64) error {
	query := fmt.Sprintf("delete from %s where `ID` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, iD)
	return err
}

func (m *defaultPermissionModel) FindOne(ctx context.Context, iD int64) (*Permission, error) {
	query := fmt.Sprintf("select %s from %s where `ID` = ? limit 1", permissionRows, m.table)
	var resp Permission
	err := m.conn.QueryRowCtx(ctx, &resp, query, iD)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPermissionModel) FindOneByName(ctx context.Context, name string) (*Permission, error) {
	var resp Permission
	query := fmt.Sprintf("select %s from %s where `Name` = ? limit 1", permissionRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, name)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPermissionModel) Insert(ctx context.Context, data *Permission) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, permissionRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Description, data.CreateTime, data.UpdateTime)
	return ret, err
}

func (m *defaultPermissionModel) Update(ctx context.Context, newData *Permission) error {
	query := fmt.Sprintf("update %s set %s where `ID` = ?", m.table, permissionRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Name, newData.Description, newData.CreateTime, newData.UpdateTime, newData.ID)
	return err
}

func (m *defaultPermissionModel) tableName() string {
	return m.table
}
