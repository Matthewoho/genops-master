// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.6

package models

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	roleFieldNames          = builder.RawFieldNames(&Role{})
	roleRows                = strings.Join(roleFieldNames, ",")
	roleRowsExpectAutoSet   = strings.Join(stringx.Remove(roleFieldNames, "`ID`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	roleRowsWithPlaceHolder = strings.Join(stringx.Remove(roleFieldNames, "`ID`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	roleModel interface {
		Insert(ctx context.Context, data *Role) (sql.Result, error)
		FindOne(ctx context.Context, iD int64) (*Role, error)
		FindOneByRoleCode(ctx context.Context, roleCode string) (*Role, error)
		Update(ctx context.Context, data *Role) error
		Delete(ctx context.Context, iD int64) error
	}

	defaultRoleModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Role struct {
		ID          int64          `db:"ID"`          // 角色ID
		RoleCode    string         `db:"RoleCode"`    // 角色编码
		RoleName    string         `db:"RoleName"`    // 角色名称
		Description sql.NullString `db:"Description"` // 角色描述
		Status      int64          `db:"Status"`      // 状态(1-正常,2-禁用)
		DelFlag     int64          `db:"DelFlag"`     // 删除状态(0-正常,1-已删除)
		CreateBy    sql.NullString `db:"CreateBy"`    // 创建人
		CreateTime  time.Time      `db:"CreateTime"`  // 创建时间
		UpdateBy    sql.NullString `db:"UpdateBy"`    // 更新人
		UpdateTime  sql.NullTime   `db:"UpdateTime"`  // 更新时间
	}
)

func newRoleModel(conn sqlx.SqlConn) *defaultRoleModel {
	return &defaultRoleModel{
		conn:  conn,
		table: "`Role`",
	}
}

func (m *defaultRoleModel) Delete(ctx context.Context, iD int64) error {
	query := fmt.Sprintf("delete from %s where `ID` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, iD)
	return err
}

func (m *defaultRoleModel) FindOne(ctx context.Context, iD int64) (*Role, error) {
	query := fmt.Sprintf("select %s from %s where `ID` = ? limit 1", roleRows, m.table)
	var resp Role
	err := m.conn.QueryRowCtx(ctx, &resp, query, iD)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRoleModel) FindOneByRoleCode(ctx context.Context, roleCode string) (*Role, error) {
	var resp Role
	query := fmt.Sprintf("select %s from %s where `RoleCode` = ? limit 1", roleRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, roleCode)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRoleModel) Insert(ctx context.Context, data *Role) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, roleRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.RoleCode, data.RoleName, data.Description, data.Status, data.DelFlag, data.CreateBy, data.CreateTime, data.UpdateBy, data.UpdateTime)
	return ret, err
}

func (m *defaultRoleModel) Update(ctx context.Context, newData *Role) error {
	query := fmt.Sprintf("update %s set %s where `ID` = ?", m.table, roleRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.RoleCode, newData.RoleName, newData.Description, newData.Status, newData.DelFlag, newData.CreateBy, newData.CreateTime, newData.UpdateBy, newData.UpdateTime, newData.ID)
	return err
}

func (m *defaultRoleModel) tableName() string {
	return m.table
}
