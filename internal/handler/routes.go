// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.6

package handler

import (
	"net/http"
	"time"

	Oauth2 "genops-master/internal/handler/Oauth2"
	accounts "genops-master/internal/handler/accounts"
	permissions "genops-master/internal/handler/permissions"
	roles "genops-master/internal/handler/roles"
	users "genops-master/internal/handler/users"
	utils "genops-master/internal/handler/utils"
	"genops-master/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/dingtalk/login",
				Handler: Oauth2.DingTalkLoginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/token",
				Handler: Oauth2.TokenHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/oauth2"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/login",
				Handler: accounts.LoginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/register",
				Handler: accounts.RegisterHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/accounts"),
		rest.WithTimeout(5000*time.Millisecond),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/info",
					Handler: accounts.GetUserInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/logout",
					Handler: accounts.LogoutHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/refresh",
					Handler: accounts.RefreshTokenHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/update",
					Handler: accounts.UpdateUserInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/update/password",
					Handler: accounts.UpdatePasswordHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/accounts"),
		rest.WithTimeout(5000*time.Millisecond),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AuthMiddleware, serverCtx.RbacMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPut,
					Path:    "/assign",
					Handler: permissions.AssignPermissionHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/check",
					Handler: permissions.CheckPermissionHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: permissions.CreatePermissionHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/delete",
					Handler: permissions.DeletePermissionHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/detach",
					Handler: permissions.DetachPermissionHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/get",
					Handler: permissions.GetPermissionHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/list",
					Handler: permissions.ListPermissionsHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/update",
					Handler: permissions.UpdatePermissionHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/permissions"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AuthMiddleware, serverCtx.RbacMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPut,
					Path:    "/assign",
					Handler: roles.AssignRoleHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: roles.CreateRoleHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/delete",
					Handler: roles.DeleteRoleHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/detach",
					Handler: roles.DetachRoleHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/get",
					Handler: roles.GetRoleHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/list",
					Handler: roles.ListRolesHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/update",
					Handler: roles.UpdateRoleHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/roles"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AuthMiddleware, serverCtx.RbacMiddleware},
			[]rest.Route{}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/services"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AuthMiddleware, serverCtx.RbacMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/create",
					Handler: users.CreateUserHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/delete",
					Handler: users.DeleteUserHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/get",
					Handler: users.GetUserHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/list",
					Handler: users.ListUsersHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/reset/password",
					Handler: users.ResetPasswordHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/search",
					Handler: users.SearchUsersHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/update",
					Handler: users.UpdateUserHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/update/status",
					Handler: users.UpdateUserStatusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1/users"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/captcha",
				Handler: utils.GetCaptchaHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/health",
				Handler: utils.HealthHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/status",
				Handler: utils.SysStatusHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/utils"),
		rest.WithTimeout(5000*time.Millisecond),
	)
}
